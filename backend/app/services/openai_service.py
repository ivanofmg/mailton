from openai import OpenAI
import os
from typing import List, Dict
import logging
import random
from collections import defaultdict
import re

from app.services.airtable_service import airtable_service
from app.services.memory_service import ChatMemoryService

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

SALUDOS_INICIALES = [
    "Hola! Soy Mario Hern√°ndez, Asesor Comercial del canal de ventas online de MAILTON KANAZO. Es un placer saludarte. ¬øC√≥mo te puedo ayudar?",
    "¬°Bienvenido! Soy Mario Hern√°ndez, Asesor Comercial de MAILTON KANAZO y te voy a atender el d√≠a de hoy. ¬øEn qu√© te puedo ayudar?",
    "¬°Bienvenido a la tienda de Mailton Kanazo! Soy Mario Hern√°ndez, Asesor Comercial del canal online, y estoy aqu√≠ para servirte. Solo dime qu√© necesitas y empezamos."
]

CATALOGO_COLORES = {
    "ANDORRA": ["NEGRO", "MARRON", "BEIGE", "BLANCO"],
    "BARBUDA": ["NEGRO", "MARRON", "BEIGE", "MOSTAZA", "GRIS", "BLANCO", "AZUL"],
    "BORA": ["NEGRO", "MARRON", "MOSTAZA", "GRIS", "BLANCO"],
    "HOBART": ["NEGRO", "MARRON", "BEIGE"],
    "MILAN": ["NEGRO", "MARRON", "BEIGE", "GRIS", "BLANCO"],
    "SANTORY": ["NEGRO", "MARRON", "MOSTAZA", "GRIS", "BLANCO"]
}

IMAGENES_MODELOS = {
    "ANDORRA": "https://i.imgur.com/S9ctWUN.png",
    "BARBUDA": "https://i.imgur.com/vnBqZoq.png",
    "BORA": "https://i.imgur.com/odVNk55.png",
    "HOBART": "https://i.imgur.com/whDv56s.png",
    "MILAN": "https://i.imgur.com/4rmEV98.png",
    "SANTORY": "https://i.imgur.com/Sdg0JZU.png"
}

TALLAS_DISPONIBLES = ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44"]

class OpenAIService:
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.model = os.getenv("OPENAI_MODEL", "gpt-4o")
        self.max_tokens = int(os.getenv("OPENAI_MAX_TOKENS", "1000"))
        self.temperature = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))
        self.chat_memory = ChatMemoryService()

        if self.api_key:
            self.client = OpenAI(api_key=self.api_key)
            logger.info("‚úÖ OpenAI configurado exitosamente")
        else:
            self.client = None
            logger.warning("‚ö†Ô∏è OpenAI API key no configurado")

    def get_mailton_system_prompt(self, catalog: List[Dict] = None, customer_data: Dict = None) -> str:
        try:
            saludo = random.choice(SALUDOS_INICIALES)

            catalog_text = ""
            
            # TEMPORAL: Usar siempre el cat√°logo hardcodeado hasta que arreglemos Airtable
            logger.info("üì¶ Usando cat√°logo hardcodeado temporalmente")
            for modelo, colores in CATALOGO_COLORES.items():
                imagen_url = IMAGENES_MODELOS.get(modelo, "")
                catalog_text += f"- {modelo}: {', '.join(colores)}\n"
                if imagen_url:
                    catalog_text += f"  Imagen: {imagen_url}\n"
            
            logger.info(f"üìù Cat√°logo generado:\n{catalog_text}")

            return f"""{saludo}

üëü Marca colombiana especializada en calzado de cuero de alta calidad.
üìç Ubicados en Colombia. Atendemos clientes por WhatsApp provenientes de campa√±as Meta.

üß† Tu trabajo consiste en:
- Detectar el idioma del cliente (espa√±ol o ingl√©s) en el primer mensaje.
- Si el primer mensaje es ambiguo o en ingl√©s, confirma el idioma as√≠:
  üëã ¬°Hola! Veo que escribiste en ingl√©s. ¬øPrefieres continuar en espa√±ol o en ingl√©s? / I noticed you're writing in English. Would you like to continue in Spanish or English?
- Mant√©n ese idioma toda la conversaci√≥n. Si empieza en espa√±ol, no preguntes.

üßë‚Äçüíº Estilo Conversacional:
- Profesional, natural, realista. No uses un tono rob√≥tico ni excesivamente amable. Evita emoticones salvo en saludos o despedidas. Nunca repitas la misma estructura. 
- IMPORTANTE: Siempre te identificas como Mario Hern√°ndez, Asesor Comercial del canal de ventas online de Mailton Kanazo
- Eres un asistente virtual, pero te presentas como Mario Hern√°ndez directamente
- Mantienes la personalidad de un asesor comercial experimentado y confiable

‚ùó Casos especiales:
- Si el cliente env√≠a una foto, puedes responder: "Esa es nuestra referencia [MODELO], viene en [COLORES DISPONIBLES], manejamos tallaje desde el 35 hasta el 44."
- Si pregunta por el cat√°logo o por modelos disponibles, debes listar TODOS los modelos disponibles con sus colores
- Si pregunta por modelos en un color espec√≠fico (ej: "modelos en azul"), lista SOLO los modelos que tienen ese color disponible
- Si dice "tallaje", entiende que se refiere a las tallas disponibles
- Si menciona un color sin modelo, sugiere varios modelos espec√≠ficos que tengan ese color y pide talla
- Si no sabes el modelo, pero menciona un color, sugiere modelos disponibles en ese color CON NOMBRES ESPEC√çFICOS
- Si solicita ver una imagen o hace un pedido final, SIEMPRE muestra la imagen del modelo usando el formato: ![Modelo NOMBRE](URL)
- **Si la direcci√≥n es zona rural:** "Como es zona rural, te ofrezco enviarlo a la oficina de la transportadora de tu elecci√≥n m√°s cercana (Servientrega, Inter Rapid√≠simo, Coordinadora, TCC, Env√≠a, etc.). El pago contra entrega sigue disponible para recoger en la oficina. ¬øCu√°l transportadora prefieres y cu√°l es la oficina m√°s cercana a ti?"
- Si preguntan por Ivanof Mercado, responde: "Ivanof Mercado es el Arquitecto de la soluci√≥n de Agentes Inteligentes para diversos sectores econ√≥micos. Puedes contactarlo a info@intelinetworks.com"
- Si preguntan qui√©n eres, tu nombre, o si eres una persona real, responde con variaciones como:
  "Soy Mario Hern√°ndez, Asesor Comercial del canal de ventas online de Mailton Kanazo. De hecho soy su asistente virtual y puedo ayudarte en todo lo que necesites. Si hay algo que quieras hablar personalmente conmigo y yo no lo puedo resolver, solo dime y te pongo en l√≠nea enseguida. Mientras tanto, si√©ntete confiado en que te puedo guiar en todo el proceso hasta el final. Solo pru√©bame."
  O variaciones creativas pero SIEMPRE identific√°ndote como Mario Hern√°ndez, Asesor Comercial.
- Si preguntan por Mario Hern√°ndez, responde: "Ese soy yo. Soy Mario Hern√°ndez, Asesor Comercial a cargo del canal de ventas online de Mailton Kanazo."
- Si preguntan qui√©n desarroll√≥ o implement√≥ este sistema, explica: "Esta soluci√≥n fue desarrollada por InteliNetworks IT & AI Automation (intelinetworks.com). Se especializan en automatizaciones basadas en IA para diversos sectores como Retail, Ventas Online, Centros Educativos, Cl√≠nicas, etc. ¬øEn qu√© sector trabajas? Podr√≠an hacer una evaluaci√≥n sin costo para tu negocio."
- Si mencionan alg√∫n sector espec√≠fico o muestran inter√©s, pregunta m√°s detalles y sugiere que contacten a info@intelinetworks.com para una evaluaci√≥n gratuita.

üéØ IMPORTANTE - Cuando pregunten por modelos en un color espec√≠fico:
Ejemplo: "modelos en azul" ‚Üí Responde: "En azul tenemos disponible: BARBUDA. ¬øQu√© talla necesitas?"
Ejemplo: "modelos en negro" ‚Üí Responde: "En negro tenemos: ANDORRA, BARBUDA, BORA, HOBART, MILAN, SANTORY. ¬øCu√°l te interesa y en qu√© talla?"

üéØ IMPORTANTE - Manejo de precios:
NUNCA des el precio directamente. Cuando pregunten por precio, SIEMPRE sigue este flujo:
1. Reconoce la pregunta con frases como "Claro que s√≠" o "Por supuesto"
2. Explica las bondades del producto primero (s√© creativo pero menciona los beneficios clave)
3. Luego da el precio en mensaje separado o al final
Ejemplos de respuestas sobre precio:
- "Claro que s√≠. Antes quiero que sepas que nuestros zapatos est√°n elaborados en 100% cuero leg√≠timo NOBU, con una suela ergon√≥mica que garantiza durabilidad, comodidad y salud."
- "Por supuesto! El sistema ergon√≥mico de nuestras suelas ayuda a la correcta postura de la columna, previene varices y dolores lumbares. Es ideal para personas que duran largas jornadas de pie."
üí≥ IMPORTANTE - Opciones de pago:
Cuando pregunten por opciones de pago o cr√©dito, SIEMPRE menciona TODAS las opciones:
"Tenemos varios m√©todos de pago disponibles: pagos contra entrega, cr√©dito con ADDI, cr√©dito con Wompi, y pagos de contado. ¬øCu√°l prefieres?"

üíµ Detalles del producto:
- Precio est√°ndar: $179.900 COP (NUNCA menciones el precio sin explicar primero las bondades)
- Env√≠o gratuito a toda Colombia
- Cuero NOBU 100% leg√≠timo + suela ergon√≥mica inyectada en PU lineal con 23% Xpanson
- Beneficios: mejora la postura de la columna, previene varices, reduce dolores lumbares y cansancio, ideal para largas jornadas de pie
- Garantiza: durabilidad, comodidad y salud

üí≥ M√©todos de pago disponibles:
- Pagos contra entrega
- Cr√©dito con ADDI
- Cr√©dito con Wompi  
- Pagos de contado

üñºÔ∏è Im√°genes:
- Cuando confirmes modelo, talla y color, o cuando el cliente solicite ver una imagen, env√≠a la imagen del modelo
- USA ESTE FORMATO ESPECIAL para que WhatsApp env√≠e la imagen como archivo: [IMG:NOMBRE_MODELO]
- Ejemplo: "Aqu√≠ tienes el modelo BARBUDA: [IMG:BARBUDA]"
- Ejemplo: "Te muestro los modelos disponibles en negro: [IMG:ANDORRA] [IMG:BARBUDA] [IMG:BORA]"
- SIEMPRE usa [IMG:MODELO] cuando el cliente haga el pedido final o solicite ver el producto
- Los modelos disponibles son: ANDORRA, BARBUDA, BORA, HOBART, MILAN, SANTORY

üîÑ Flujo ideal:
1. Saluda solo al inicio
2. Confirma idioma si aplica
3. Si menciona color, pregunta por modelo y talla
4. Si menciona modelo, pregunta por talla y color
5. Una vez confirmado modelo + talla + color, ofrece info del producto
6. **IMPORTANTE - Si pregunta por precio:** NUNCA des el precio directamente. SIEMPRE explica primero las bondades del producto usando una de estas variaciones:
   - "Claro que s√≠. Antes quiero que sepas que nuestros zapatos est√°n elaborados en 100% cuero leg√≠timo NOBU, con una suela ergon√≥mica inyectada en PU lineal con 23% de Xpanson, para garantizar durabilidad, comodidad y salud."
   - "Por supuesto! Antes quiero que conozcas los beneficios de la suela ergon√≥mica: El sistema ergon√≥mico de nuestras suelas te ayuda a la correcta postura de la columna y es √∫til para personas que caminan mucho o duran largas jornadas de pie. Su estructura ayuda a prevenir problemas de varices, dolores lumbares y cansancio."
   - S√© creativo con las palabras pero SIEMPRE resalta los beneficios antes del precio.
   - Luego, en mensaje separado, da el precio: "El precio es de $179.900 COP"
7. Si pregunta por opciones de pago, menciona TODOS los m√©todos disponibles: contra entrega, cr√©dito con ADDI, cr√©dito con Wompi, y pagos de contado
8. Si desea comprar, solicita: nombre, c√©dula, celular, direcci√≥n completa, ciudad, correo, modelo, talla y color. **Si es zona rural, ofrece env√≠o a oficina de transportadora.**
9. Si no compra, desp√≠dete cordialmente: "Gracias por escribirnos üòä. Espero que pronto pruebes la calidad y confort de nuestros productos."

üîê Importante:
- Si la direcci√≥n de env√≠o es una zona rural, ofrece la opci√≥n de recoger en la oficina de la transportadora de su elecci√≥n m√°s cercana, ya que no podemos llegar directamente a esas zonas
- El pago contra entrega sigue disponible para la recolecci√≥n en la oficina de la transportadora
- El cliente debe nombrar la oficina de su transportadora de confianza o la m√°s cercana
- Ejemplos de transportadoras: Servientrega, Inter Rapid√≠simo, Coordinadora, TCC, Env√≠a
- El pedido se despachar√° a trav√©s de esa compa√±√≠a hacia su oficina m√°s cercana

üíº IMPORTANTE - Identificaci√≥n y Lead Generation:
- Mant√©n un tono natural y conversacional
- Si el cliente menciona que tiene un negocio o trabaja en alg√∫n sector espec√≠fico, muestra inter√©s genuino
- Pregunta sutilmente sobre su sector: "¬øEn qu√© sector trabajas?" o "¬øQu√© tipo de negocio tienes?"
- Si es Retail/Ventas: "InteliNetworks tiene soluciones espec√≠ficas para ventas online y por cat√°logo"
- Si es Educaci√≥n: "Tienen automatizaciones especiales para centros educativos"  
- Si es Salud: "Desarrollan sistemas para cl√≠nicas, consultorios m√©dicos, odontol√≥gicos, est√©tica"
- Si muestra inter√©s: "Podr√≠an hacer una evaluaci√≥n gratuita de tu negocio. ¬øTe gustar√≠a que te contacten?"

üßæ Modelos disponibles:
{catalog_text}

üî• RECUERDA: 
- Siempre responde en espa√±ol, salvo que el cliente pida ingl√©s
- CUANDO MENCIONEN UN COLOR ESPEC√çFICO, LISTA LOS MODELOS POR NOMBRE
- S√© natural al identificar oportunidades de negocio para InteliNetworks
- No fuerces la conversaci√≥n hacia InteliNetworks, hazlo de forma org√°nica
"""
        except Exception as e:
            logger.error(f"‚ùå Error generando prompt: {e}")
            return f"{saludo}\n\n¬øEn qu√© puedo ayudarte hoy?"

    def _detect_products_mentioned(self, message: str, response: str) -> List[str]:
        """Detecta productos mencionados en el mensaje y respuesta"""
        try:
            products = []
            message_upper = message.upper() if message else ""
            response_upper = response.upper() if response else ""
            
            # Buscar modelos en CATALOGO_COLORES
            for modelo in CATALOGO_COLORES.keys():
                if modelo in message_upper or modelo in response_upper:
                    products.append(modelo)
            
            # Buscar variaciones comunes de nombres
            variaciones = {
                "BARBUDA": ["BARBUDAS"],
                "ANDORRA": ["ANDORRAS"],
                "BORA": ["BORAS"],
                "HOBART": ["HOBARTS"],
                "MILAN": ["MILANS", "MIL√ÅN"],
                "SANTORY": ["SANTORYS", "SANTORI"]
            }
            
            for modelo, vars in variaciones.items():
                for var in vars:
                    if var in message_upper or var in response_upper:
                        if modelo not in products:
                            products.append(modelo)
            
            return products
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error detectando productos: {e}")
            return []

    def _detect_intent(self, message: str) -> str:
        """Detecta la intenci√≥n del mensaje"""
        try:
            if not message:
                return "general_inquiry"
                
            message_lower = message.lower()
            
            # Palabras clave para diferentes intenciones
            price_keywords = ['precio', 'costo', 'valor', 'cuanto', 'cu√°nto', 'vale', 'costar']
            purchase_keywords = ['comprar', 'quiero', 'necesito', 'pedido', 'orden', 'llevar', 'adquirir']
            product_keywords = ['color', 'talla', 'modelo', 'disponible', 'catalogo', 'cat√°logo', 'referencia']
            greeting_keywords = ['hola', 'buenas', 'saludos', 'buenos d√≠as', 'buenas tardes', 'buenas noches']
            shipping_keywords = ['env√≠o', 'envio', 'entrega', 'delivery', 'despacho', 'domicilio']
            payment_keywords = ['pago', 'contra entrega', 'efectivo', 'tarjeta', 'transferencia']
            
            # An√°lisis de intenci√≥n
            if any(word in message_lower for word in price_keywords):
                return "price_inquiry"
            elif any(word in message_lower for word in purchase_keywords):
                return "purchase_intent"
            elif any(word in message_lower for word in product_keywords):
                return "product_inquiry"
            elif any(word in message_lower for word in greeting_keywords):
                return "greeting"
            elif any(word in message_lower for word in shipping_keywords):
                return "shipping_inquiry"
            elif any(word in message_lower for word in payment_keywords):
                return "payment_inquiry"
            else:
                return "general_inquiry"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error detectando intenci√≥n: {e}")
            return "general_inquiry"

    def _detect_colors_mentioned(self, message: str, response: str) -> List[str]:
        """Detecta colores mencionados en el mensaje y respuesta"""
        try:
            colors = []
            all_colors = ["NEGRO", "MARRON", "BEIGE", "MOSTAZA", "GRIS", "BLANCO", "AZUL"]
            
            text = ((message or "") + " " + (response or "")).upper()
            
            for color in all_colors:
                if color in text:
                    colors.append(color)
            
            # Variaciones de colores
            color_variations = {
                "NEGRO": ["NEGRO", "BLACK"],
                "MARRON": ["MARR√ìN", "CAF√â", "BROWN"],
                "AZUL": ["BLUE"],
                "BLANCO": ["WHITE"],
                "GRIS": ["GRAY", "GREY"]
            }
            
            for color, variations in color_variations.items():
                for variation in variations:
                    if variation in text and color not in colors:
                        colors.append(color)
            
            return colors
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error detectando colores: {e}")
            return []

    def _detect_sizes_mentioned(self, message: str, response: str) -> List[str]:
        """Detecta tallas mencionadas en el mensaje y respuesta"""
        try:
            sizes = []
            text = (message or "") + " " + (response or "")
            
            # Buscar n√∫meros que correspondan a tallas
            for size in TALLAS_DISPONIBLES:
                if re.search(r'\b' + size + r'\b', text):
                    sizes.append(size)
            
            return sizes
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error detectando tallas: {e}")
            return []

    def _get_product_image_url(self, model_name: str) -> str:
        """Obtiene la URL de imagen para un modelo espec√≠fico"""
        try:
            model_upper = model_name.upper()
            return IMAGENES_MODELOS.get(model_upper, "")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error obteniendo imagen para {model_name}: {e}")
            return ""

    def _calculate_confidence(self, message: str, intent: str, products: List[str]) -> float:
        """Calcula un score de confianza basado en el an√°lisis"""
        try:
            confidence = 0.5  # Base
            
            # Aumentar confianza si hay productos espec√≠ficos
            if products:
                confidence += 0.3
            
            # Aumentar confianza basada en intenci√≥n
            intent_confidence = {
                "greeting": 0.9,
                "price_inquiry": 0.8,
                "purchase_intent": 0.9,
                "product_inquiry": 0.7,
                "shipping_inquiry": 0.8,
                "payment_inquiry": 0.8,
                "general_inquiry": 0.5,
                "error": 0.1
            }
            
            confidence = min(1.0, confidence + intent_confidence.get(intent, 0.5) - 0.5)
            
            return round(confidence, 2)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error calculando confianza: {e}")
            return 0.5

    async def chat_with_agent(self, message: str, catalog: List[Dict], customer_email: str) -> Dict:
        if not self.client:
            logger.error("‚ùå OpenAI client no est√° configurado.")
            return {
                "response": "Lo sentimos. Estamos teniendo dificultades t√©cnicas. Intenta de nuevo m√°s tarde.",
                "products_mentioned": [],
                "colors_mentioned": [],
                "sizes_mentioned": [],
                "intent": "error",
                "confidence": 0.0
            }

        try:
            logger.info(f"üì• Iniciando procesamiento para: {customer_email}")
            
            # Generar prompt de forma segura
            prompt = self.get_mailton_system_prompt(catalog)
            logger.info(f"üìù Prompt generado exitosamente")
            
            # Obtener memoria de forma segura
            try:
                memory = self.chat_memory.get_memory(customer_email)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error obteniendo memoria: {e}")
                memory = []
            
            messages = [{"role": "system", "content": prompt}]

            # Si hay historial previo, se agrega
            if memory:
                messages.extend(memory)

            # Agrega el mensaje actual del usuario
            messages.append({"role": "user", "content": message})

            logger.info(f"üì• Mensaje recibido: {message}")

            # Llamada a OpenAI
            completion = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=self.max_tokens,
                temperature=self.temperature
            )

            response = completion.choices[0].message.content.strip()
            logger.info(f"ü§ñ Respuesta generada por IA: {response}")

            # Actualiza memoria de forma segura
            try:
                self.chat_memory.update_memory(customer_email, {"role": "user", "content": message})
                self.chat_memory.update_memory(customer_email, {"role": "assistant", "content": response})
                logger.info(f"üíæ Memoria actualizada exitosamente")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error actualizando memoria: {e}")

            # An√°lisis inteligente del contenido
            products_mentioned = self._detect_products_mentioned(message, response)
            colors_mentioned = self._detect_colors_mentioned(message, response)
            sizes_mentioned = self._detect_sizes_mentioned(message, response)
            intent = self._detect_intent(message)
            confidence = self._calculate_confidence(message, intent, products_mentioned)

            # Log de an√°lisis
            logger.info(f"üîç Productos detectados: {products_mentioned}")
            logger.info(f"üé® Colores detectados: {colors_mentioned}")
            logger.info(f"üìè Tallas detectadas: {sizes_mentioned}")
            logger.info(f"üéØ Intenci√≥n detectada: {intent} (confianza: {confidence:.2f})")

            return {
                "response": response,
                "products_mentioned": products_mentioned,
                "colors_mentioned": colors_mentioned,
                "sizes_mentioned": sizes_mentioned,
                "intent": intent,
                "confidence": confidence
            }

        except Exception as e:
            logger.error(f"‚ùå Error durante chat_with_agent: {e}")
            logger.error(f"‚ùå Error details: {str(e)}")
            return {
                "response": "Lo sentimos. Estamos teniendo dificultades t√©cnicas. Intenta de nuevo m√°s tarde.",
                "products_mentioned": [],
                "colors_mentioned": [],
                "sizes_mentioned": [],
                "intent": "error",
                "confidence": 0.0
            }