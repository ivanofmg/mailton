#!/bin/bash
# Auto backup completo - Mailton Kanazo
# Ubicaci√≥n: /opt/mailton/scripts/auto_backup.sh
# Versi√≥n mejorada que incluye todo el proyecto

DATE=$(date +%Y%m%d_%H%M%S)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"  # /opt/mailton
BACKUP_DIR="$PROJECT_DIR/backups"

echo "üîÑ Iniciando backup autom√°tico completo: $DATE"
echo "üìÅ Proyecto: $PROJECT_DIR"
echo "üìÑ Script: $SCRIPT_DIR/$(basename "$0")"

# Verificar que estamos en el directorio correcto
if [ ! -d "$PROJECT_DIR" ]; then
    echo "‚ùå Error: Directorio del proyecto no encontrado: $PROJECT_DIR"
    exit 1
fi

cd $PROJECT_DIR

# Crear directorio de backups si no existe
mkdir -p $BACKUP_DIR

echo "üì¶ Creando backup f√≠sico completo..."

# Backup f√≠sico COMPLETO del proyecto (excluyendo archivos innecesarios)
tar -czf $BACKUP_DIR/mailton-full-backup_$DATE.tar.gz \
    --exclude='backups' \
    --exclude='__pycache__' \
    --exclude='*.pyc' \
    --exclude='.git' \
    --exclude='node_modules' \
    --exclude='venv' \
    --exclude='*.log' \
    --exclude='.wwebjs_cache' \
    backend/ whatsapp/ scripts/ docs/ *.md 2>/dev/null

# Backup espec√≠fico de configuraciones cr√≠ticas
echo "‚öôÔ∏è Backup de configuraciones cr√≠ticas..."
tar -czf $BACKUP_DIR/config-backup_$DATE.tar.gz \
    backend/app/ \
    whatsapp/index.js \
    whatsapp/package.json \
    scripts/ \
    docs/ \
    roadmap_actualizado_micro_fases.md 2>/dev/null

# Backup de PM2 (si existe)
if command -v pm2 &> /dev/null; then
    echo "üîß Backup de configuraci√≥n PM2..."
    pm2 save &>/dev/null
    if [ -f ~/.pm2/dump.pm2 ]; then
        cp ~/.pm2/dump.pm2 $BACKUP_DIR/pm2-config_$DATE.json
    fi
fi

# Backup de autenticaci√≥n WhatsApp (si existe)
if [ -d "whatsapp/.wwebjs_auth" ]; then
    echo "üì± Backup de autenticaci√≥n WhatsApp..."
    tar -czf $BACKUP_DIR/whatsapp-auth_$DATE.tar.gz whatsapp/.wwebjs_auth 2>/dev/null
fi

echo "üìä Informaci√≥n del backup:"
ls -lah $BACKUP_DIR/mailton-full-backup_$DATE.tar.gz
ls -lah $BACKUP_DIR/config-backup_$DATE.tar.gz

# Backup git (solo si hay cambios)
echo "üìù Verificando cambios para Git..."

# Verificar si estamos en un repo git
if [ -d ".git" ]; then
    BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
    
    # Verificar cambios
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo "üîÑ Detectados cambios, haciendo commit autom√°tico..."
        git add -A
        git commit -m "auto: backup autom√°tico $DATE

- Backup f√≠sico: mailton-full-backup_$DATE.tar.gz
- Configuraciones: config-backup_$DATE.tar.gz
- Estado del sistema al: $(date)
- Branch: $BRANCH"
        
        # Push con manejo de errores
        if git push origin $BRANCH 2>/dev/null; then
            echo "‚úÖ Backup git completado: push a $BRANCH"
        else
            echo "‚ö†Ô∏è Warning: No se pudo hacer push (posible problema de conectividad)"
        fi
    else
        echo "‚ÑπÔ∏è Sin cambios para backup git"
    fi
else
    echo "‚ö†Ô∏è Warning: No es un repositorio git"
fi

# Limpiar backups antiguos (mantener √∫ltimos 10)
echo "üßπ Limpiando backups antiguos..."
find $BACKUP_DIR -name "mailton-full-backup_*.tar.gz" -type f | sort -r | tail -n +11 | xargs rm -f 2>/dev/null
find $BACKUP_DIR -name "config-backup_*.tar.gz" -type f | sort -r | tail -n +11 | xargs rm -f 2>/dev/null

# Resumen final
echo ""
echo "‚úÖ BACKUP COMPLETADO: $DATE"
echo "üì¶ Archivos generados:"
echo "   - mailton-full-backup_$DATE.tar.gz (proyecto completo)"
echo "   - config-backup_$DATE.tar.gz (configuraciones cr√≠ticas)"
[ -f "$BACKUP_DIR/pm2-config_$DATE.json" ] && echo "   - pm2-config_$DATE.json (configuraci√≥n PM2)"
[ -f "$BACKUP_DIR/whatsapp-auth_$DATE.tar.gz" ] && echo "   - whatsapp-auth_$DATE.tar.gz (autenticaci√≥n WhatsApp)"
echo ""
echo "üìÅ Ubicaci√≥n: $BACKUP_DIR"
echo "üíæ Espacio usado: $(du -sh $BACKUP_DIR | cut -f1)"
